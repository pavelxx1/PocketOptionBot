import tensorflow as tf
print(f"TensorFlow version: {tf.__version__}")
import base64
import json
import numpy as np
from datetime import datetime, timedelta

import pandas as pd
from selenium.webdriver.common.by import By
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from stock_indicators import indicators
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint
from sklearn.preprocessing import StandardScaler, RobustScaler

from driver import get_driver
from utils import get_quotes, get_value

BASE_URL = 'https://pocketoption.com'
PERIOD = 0
FUTURES_LEN = 1  # minutes
CANDLES = []
ACTIONS = {}
MAX_ACTIONS = 1
ACTIONS_SECONDS = PERIOD
LAST_REFRESH = datetime.now()
CURRENCY = None
CURRENCY_CHANGE = False
CURRENCY_CHANGE_DATE = datetime.now()
LOOK_BACK = 10  # Количество предыдущих свечей для LSTM

IS_AMOUNT_SET = False

driver = get_driver()

def load_web_driver():
    url = f'{BASE_URL}/en/cabinet/demo-quick-high-low/'
    driver.get(url)

def do_action(signal):
    action = True
    last_value = CANDLES[-1][2]

    global ACTIONS, IS_AMOUNT_SET
    for dat in list(ACTIONS.keys()):
        if dat < datetime.now() - timedelta(seconds=ACTIONS_SECONDS):
            del ACTIONS[dat]

    if action:
        if len(ACTIONS) >= MAX_ACTIONS:
            action = False

    if action:
        try:
            print(
                f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} {signal.upper()}, currency: {CURRENCY} last_value: {last_value}")
            driver.find_element(by=By.CLASS_NAME, value=f'btn-{signal}').click()
            ACTIONS[datetime.now()] = last_value
            IS_AMOUNT_SET = False
        except Exception as e:
            print(e)

# def get_data(quotes, debug=False):
#     emalong = indicators.get_ema(quotes, lookback_periods=8)
#     emashort = indicators.get_ema(quotes, lookback_periods=3)
#     macd = indicators.get_macd(quotes)

#     data = []
#     for i in range(40, len(quotes) - TIME, 1):
#         try:
#             # EMA пересечение
#             ema_cross = 1 if emashort[i-1].ema > emalong[i-1].ema and emashort[i].ema < emalong[i].ema and get_value(quotes[i]) < get_value(quotes[i-1]) < get_value(quotes[i-2]) else 0
#             # MACD
#             macd_signal = 1 if macd[i].macd >= macd[i].signal else 0
#             # Целевая переменная - profit
#             profit = 1 if get_value(quotes[i + TIME]) <= get_value(quotes[i]) else 0
            
#             data.append([ema_cross, macd_signal, profit])
#         except Exception as e:
#             print(f"Error in get_data at index {i}: {e}")
    
#     data_array = np.array(data)
    
#     if debug and len(data) > 0:
#         print("\n----- ДАННЫЕ ДЛЯ МОДЕЛИ -----")
#         print(f"Размерность массива: {data_array.shape}")
#         print(f"Первые 10 записей:")
#         df = pd.DataFrame(data_array[:10])
#         print(df)
#         print("--------------------------\n")
    
#     return data_array


def get_data(quotes, debug=False):
    data = []
    for i in range(5, len(quotes) - (FUTURES_LEN + 0), 2):  # Увеличен диапазон для проверки FUTURES_LEN+2
        try:
            # Процентные изменения
            pct_diff_1 = (get_value(quotes[i]) - get_value(quotes[i-1])) / get_value(quotes[i-1])*100
            pct_diff_2 = (get_value(quotes[i]) - get_value(quotes[i-2])) / get_value(quotes[i-2])*100
            pct_diff_3 = (get_value(quotes[i]) - get_value(quotes[i-3])) / get_value(quotes[i-3])*100
            pct_diff_4 = (get_value(quotes[i]) - get_value(quotes[i-4])) / get_value(quotes[i-4])*100
            pct_diff_5 = (get_value(quotes[i]) - get_value(quotes[i-5])) / get_value(quotes[i-5])*100

            # Проверяем оба условия
            check_1 = get_value(quotes[i + FUTURES_LEN]) <= get_value(quotes[i])
            check_2 = get_value(quotes[i + FUTURES_LEN + 0]) <= get_value(quotes[i])
            
            # Целевая переменная (1 если оба условия выполняются)
            profit = 1 if check_1 and check_2 else 0
            
            data.append([
              pct_diff_1,
              pct_diff_2,
              pct_diff_3, 
              pct_diff_4, 
              pct_diff_5,
              profit])
        except Exception as e:
            print(f"Error in get_data at index {i}: {e}")
    
    data_array = np.array(data, dtype=np.float32)
    
    if debug and len(data) > 0:
        print("\n----- ДАННЫЕ ДЛЯ МОДЕЛИ -----")
        print(f"Размерность массива: {data_array.shape}")
        print(f"Первые 10 записей:")
        df = pd.DataFrame(data_array[:10])
        print(df)
        print("--------------------------\n")
    
    return data_array


def prepare_sequences(data, look_back=LOOK_BACK):
    X, y = [], []
    # Автоматический расчет количества признаков (все столбцы, кроме последнего)
    feature_count = data.shape[1] - 1
    features = data[:, :feature_count]  # Все столбцы, кроме последнего - признаки
    targets = data[:, -1]  # Последний столбец - целевая переменная
    
    for i in range(len(data) - look_back):
        X.append(features[i:i+look_back])
        y.append(targets[i+look_back-1])
    return np.array(X), np.array(y)

def check_data():
    try:
        quotes = get_quotes(CANDLES)
        
        # Получаем данные
        data = get_data(quotes[-150:], debug=True)
        if len(data) < LOOK_BACK + 20:
            print("Недостаточно данных для обучения")
            return
        
        # Автоматический расчет количества признаков
        feature_count = data.shape[1] - 1
        
        # Нормализация признаков
        scaler = RobustScaler()
        scaled_features = scaler.fit_transform(data[:, :feature_count])
        data[:, :feature_count] = scaled_features
        
        # Показать результаты нормализации
        print("Первые 3 записи после нормализации:")
        print(data[:3, :feature_count])
        print()
        
        # Преобразуем в последовательности для LSTM
        X, y = prepare_sequences(data)
        print(f"Форма X для LSTM: {X.shape}, форма y: {y.shape}")
        
        # Подсчет распределения классов
        unique, counts = np.unique(y, return_counts=True)
        class_distribution = dict(zip(unique, counts))
        print(f"Распределение классов: {class_distribution}")
        
        # Расчет весов классов
        n_samples = len(y)
        n_classes = len(unique)
        class_weight = {
            0: n_samples / (n_classes * counts[0]) if 0 in unique and counts[0] > 0 else 1.0,
            1: n_samples / (n_classes * counts[1]) if 1 in unique and counts[1] > 0 else 1.0
        }
        # print(f"Веса классов: {class_weight}")
        
        # Разбиваем на обучающую и тестовую выборки
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.12, shuffle=False)

        print('X_test.shape:',X_test.shape)
        
        # Создаем LSTM модель с динамическим количеством признаков
        model = Sequential()
        model.add(LSTM(64, input_shape=(LOOK_BACK, feature_count), return_sequences=False))
        model.add(Dense(64, activation='tanh'))
        model.add(Dropout(0.2))        
        model.add(Dense(32, activation='tanh'))
        model.add(Dense(1, activation='sigmoid'))
        
        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
        
        # Обучение с колбэком и весами классов
        checkpoint = ModelCheckpoint('best_model.h5', monitor='val_accuracy', 
                                    save_best_only=True, save_weights_only=True, 
                                    mode='max', verbose=0)
        
        model.fit(X_train, y_train, epochs=35, batch_size=32,
                validation_split=0.15, verbose=0, callbacks=[checkpoint],
                class_weight=class_weight)
        
        # Загружаем лучшие веса
        model.load_weights('best_model.h5')
        
        # Оценка модели
        _, accuracy = model.evaluate(X_test, y_test, verbose=0)
        
        # Последняя последовательность для предсказания (с учетом динамического количества признаков)
        last_sequence = X[-1:].reshape(1, LOOK_BACK, feature_count)
        prediction = round(float(model.predict(last_sequence, verbose=0)[0][0]),2)
        accuracy = round(accuracy,2)

        sell = round(1 - prediction,2)
        buy = prediction        
        
        print()
        print('LSTM accuracy:', accuracy)
        print('SELL probability:', sell)
        print('BUY probability:', buy)
        print()
        
        flag = False
        if accuracy >= 0.64: flag = True


        if (sell >= 0.51 and flag) or (sell >= 0.99):  # PUT
            do_action('put')
            print('....make SELL')
        elif (buy >= 0.51 and flag) or (buy >= 0.99):    # CALL
            do_action('call')
            print('....make BUY')
        print(quotes[-1].date, 'working...')

    except Exception as e:
        print(f"Ошибка в check_data: {e}")


def websocket_log():
    global CURRENCY, CURRENCY_CHANGE, CURRENCY_CHANGE_DATE, LAST_REFRESH, PERIOD, CANDLES
    try:
        current_symbol = driver.find_element(by=By.CLASS_NAME, value='current-symbol').text
        if current_symbol != CURRENCY:
            CURRENCY = current_symbol
            CURRENCY_CHANGE = True
            CURRENCY_CHANGE_DATE = datetime.now()
    except:
        pass

    if CURRENCY_CHANGE and CURRENCY_CHANGE_DATE < datetime.now() - timedelta(seconds=5):
        driver.refresh()  # refresh page to cut off unwanted signals
        CURRENCY_CHANGE = False
        CANDLES = []
        PERIOD = 0

    for wsData in driver.get_log('performance'):
        message = json.loads(wsData['message'])['message']
        response = message.get('params', {}).get('response', {})
        if response.get('opcode', 0) == 2 and not CURRENCY_CHANGE:
            payload_str = base64.b64decode(response['payloadData']).decode('utf-8')
            data = json.loads(payload_str)
            if 'asset' in data and 'candles' in data:  # 5m
                PERIOD = data['period']
                CANDLES = list(reversed(data['candles']))  # timestamp open close high low
                CANDLES.append([CANDLES[-1][0] + PERIOD, CANDLES[-1][1], CANDLES[-1][2], CANDLES[-1][3], CANDLES[-1][4]])
                for tstamp, value in data['history']:
                    tstamp = int(float(tstamp))
                    CANDLES[-1][2] = value  # set close all the time
                    if value > CANDLES[-1][3]:  # set high
                        CANDLES[-1][3] = value
                    elif value < CANDLES[-1][4]:  # set low
                        CANDLES[-1][4] = value
                    if tstamp % PERIOD == 0:
                        if tstamp not in [c[0] for c in CANDLES]:
                            CANDLES.append([tstamp, value, value, value, value])
                print('Got', len(CANDLES), 'candles for', data['asset'])
            try:
                current_value = data[0][2]
                CANDLES[-1][2] = current_value  # set close all the time
                if current_value > CANDLES[-1][3]:  # set high
                    CANDLES[-1][3] = current_value
                elif current_value < CANDLES[-1][4]:  # set low
                    CANDLES[-1][4] = current_value
                tstamp = int(float(data[0][1]))
                if tstamp % PERIOD == 0:
                    if tstamp not in [c[0] for c in CANDLES]:
                        try:
                            check_data()
                        except Exception as e:
                            print(e)
                        CANDLES.append([tstamp, current_value, current_value, current_value, current_value])
            except:
                pass



if __name__ == '__main__':
    load_web_driver()
    from time import sleep
    while True:
        websocket_log()
        sleep(0.1)